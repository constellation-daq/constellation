# SPDX-FileCopyrightText: 2023 DESY and the Constellation authors
# SPDX-License-Identifier: CC0-1.0

stages:
  - build
  - test
  - lint
  - format
  - docs
  - deploy

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      variables:
        CCACHE_DISABLE: 1
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "push"
      when: never
    - when: always

variables:
  CCACHE_DIR: $CI_PROJECT_DIR/.cache/ccache
  PIP_CACHE_DIR: $CI_PROJECT_DIR/.cache/pip

# C++ templates

# Files that should trigger C++ jobs when changed
.cpp-rules-changes: &cpp-rules-changes
  changes:
    - .gitlab-ci.yml
    - meson.build
    - cxx/**/*
    - subprojects/**/*
    - .clang-tidy
    - gcovr.cfg
    - docs/Doxyfile

# In MRs only run if above mentioned files are changed, otherwise always
.cpp-rules: &cpp-rules
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      <<: *cpp-rules-changes
    - if: $CI_PIPELINE_SOURCE != "merge_request_event"

.meson-wrap-cache: &meson-wrap-cache
  key: meson-wrap-cache
  paths:
    - subprojects/packagecache/
    - subprojects/argparse-*/
    - subprojects/asio-*/
    - subprojects/Catch2-*/
    - subprojects/cppzmq-*/
    - subprojects/libzmq-*/
    - subprojects/magic_enum-*/
    - subprojects/msgpack-cxx-*/
    - subprojects/spdlog-*/
  policy: pull

.ccache: &ccache
  key: ccache-$CI_JOB_IMAGE
  paths:
    - $CCACHE_DIR/

.alma9-cern:
  image: gitlab.desy.de:5555/constellation/build-images/alma9-cern:latest
  variables:
    CXX: ccache clang++
    CXX_LD: lld

.debian-clang:
  image: gitlab.desy.de:5555/constellation/build-images/debian-clang:latest
  variables:
    CXX: ccache clang++
    CXX_LD: mold

.debian-gcc:
  image: gitlab.desy.de:5555/constellation/build-images/debian-gcc:latest
  variables:
    CXX: ccache g++

.fedora-latest:
  image: gitlab.desy.de:5555/constellation/build-images/fedora-latest:latest
  variables:
    CXX: ccache clang++

.fedora-sphinx:
  image: gitlab.desy.de:5555/constellation/build-images/fedora-sphinx:latest
  before_script:
    - source /venv/bin/activate

.ubuntu-22.04:
  image: gitlab.desy.de:5555/constellation/build-images/ubuntu-22.04:latest
  variables:
    CXX: ccache g++

.ubuntu-24.04:
  image: gitlab.desy.de:5555/constellation/build-images/ubuntu-24.04:latest
  variables:
    CXX: ccache g++

# Python templates

# Files that should trigger Python jobs when changed
.python-rules-changes: &python-rules-changes
  changes:
    - .gitlab-ci.yml
    - meson.build
    - python/**/*
    - pyproject.toml

# In MRs only run if above mentioned files are changed, otherwise always
.python-rules: &python-rules
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      <<: *python-rules-changes
    - if: $CI_PIPELINE_SOURCE != "merge_request_event"

.python-venv:
  cache:
    - key: pip-cache
      paths:
        - $PIP_CACHE_DIR/
  before_script:
    - python3 -m venv venv
    - source venv/bin/activate
    - pip install meson-python meson ninja

.python-3.11:
  image: python:3.11

.python-3.12:
  image: python:3.12

# Combined Python / C++ templates

# In MRs run only if either C++ or Python files are changed
.cpp-python-rules: &cpp-python-rules
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      <<: *cpp-rules-changes
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      <<: *python-rules-changes
    - if: $CI_PIPELINE_SOURCE != "merge_request_event"

# build stage

.build-cpp:
  stage: build
  cache:
    - *meson-wrap-cache
    - *ccache
  script:
    - meson setup build -Dimpl_cxx=enabled -Dcxx_tests=enabled ${BUILD_OPTIONS}
    - meson compile -C build
  artifacts:
    paths:
      - build
    expire_in: 24 hour
  <<: *cpp-rules

.build-py:
  stage: build
  script:
    - pip install --no-build-isolation -e .[dev]
    - python3 -m build
  <<: *python-rules

build:alma9-cern:
  extends:
    - .build-cpp
    - .alma9-cern
  cache:
    - <<: *meson-wrap-cache
      policy: pull-push
    - *ccache
  variables:
    BUILD_OPTIONS: "-Dbuildtype=release -Db_lto=true -Db_lto_mode=thin"

build:debian-clang:
  extends:
    - .build-cpp
    - .debian-clang
  variables:
    BUILD_OPTIONS: "-Dbuildtype=debugoptimized -Db_sanitize=address -Db_lundef=false"

build:debian-gcc:
  extends:
    - .build-cpp
    - .debian-gcc
  variables:
    BUILD_OPTIONS: "-Dbuildtype=debug -Db_coverage=true -Dcpp_std=c++23"
  <<: *cpp-python-rules # Run on both C++ and Python changes for correct coverage reporting

build:fedora-latest:
  extends:
    - .build-cpp
    - .fedora-latest
  variables:
    BUILD_OPTIONS: "-Dbuildtype=debugoptimized -Db_sanitize=address -Db_lundef=false"

build:ubuntu-22.04:
  extends:
    - .build-cpp
    - .ubuntu-22.04
  variables:
    BUILD_OPTIONS: "-Dbuildtype=release"

build:ubuntu-24.04:
  extends:
    - .build-cpp
    - .ubuntu-24.04
  variables:
    BUILD_OPTIONS: "-Dbuildtype=release"

build:python-3.11:
  extends:
    - .build-py
    - .python-venv
    - .python-3.11

build:python-3.12:
  extends:
    - .build-py
    - .python-venv
    - .python-3.12

# test stage

.test-cpp:
  stage: test
  script:
    - meson test -C build --suite Constellation --no-rebuild --print-errorlogs
  artifacts:
    reports:
      junit: build/meson-logs/testlog.junit.xml
  <<: *cpp-rules

.test-py:
  stage: test
  script:
    - pip install --no-build-isolation -e .[test]
    - pytest --force-sugar --junitxml=junit.xml
  artifacts:
    reports:
      junit: junit.xml
  <<: *python-rules

test:alma9-cern:
  extends:
    - .test-cpp
    - .alma9-cern
  needs:
    - job: build:alma9-cern
      artifacts: true

test:debian-clang:
  extends:
    - .test-cpp
    - .debian-clang
  needs:
    - job: build:debian-clang
      artifacts: true

test:debian-gcc:
  extends:
    - .test-cpp
    - .debian-gcc
  needs:
    - job: build:debian-gcc
      artifacts: true
  artifacts:
    paths:
      - build
    expire_in: 24 hour
  <<: *cpp-python-rules # Run on both C++ and Python changes for correct coverage reporting

test:fedora-latest:
  extends:
    - .test-cpp
    - .fedora-latest
  needs:
    - job: build:fedora-latest
      artifacts: true

test:ubuntu-22.04:
  extends:
    - .test-cpp
    - .ubuntu-22.04
  needs:
    - job: build:ubuntu-22.04
      artifacts: true

test:ubuntu-24.04:
  extends:
    - .test-cpp
    - .ubuntu-24.04
  needs:
    - job: build:ubuntu-24.04
      artifacts: true

test:python-3.11:
  extends:
    - .test-py
    - .python-venv
    - .python-3.11
  needs:
    - job: build:python-3.11
      artifacts: false

test:python-3.12:
  extends:
    - .test-py
    - .python-venv
    - .python-3.12
  needs:
    - job: build:python-3.12
      artifacts: false

# lint stage

.lint:
  stage: lint

lint:coverage-py:
  extends:
    - .lint
    - .python-venv
    - .python-3.11
  needs:
    - job: test:python-3.11
      artifacts: false
      optional: true
  script:
    - pip install --no-build-isolation -e .[test]
    - pytest --force-sugar --cov --cov-report term --cov-report xml:coverage.xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  <<: *cpp-python-rules # Run on both C++ and Python changes for correct coverage reporting

lint:coverage-cpp:
  extends:
    - .lint
    - .debian-gcc
  needs:
    - job: test:debian-gcc
      artifacts: true
  script:
    - ninja -C build coverage-xml
  coverage: '/^\s*lines:\s*\d+.\d+\%/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: build/meson-logs/coverage.xml
  <<: *cpp-python-rules # Run on both C++ and Python changes for correct coverage reporting

lint:clang-tidy:
  extends:
    - .lint
    - .debian-clang
  needs:
    - job: build:debian-clang
      artifacts: true
  script:
    - ninja -C build clang-tidy
  rules:
    - if: $CI_PIPELINE_SOURCE != "merge_request_event"

lint:clang-tidy-diff:
  extends:
    - .lint
    - .debian-clang
  needs:
    - job: build:debian-clang
      artifacts: true
  script:
    - git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    - git diff -U0 origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME -- | clang-tidy-diff -p 1 -path build -j $(nproc) | tee clang-tidy-diff.log
    - | # Until LLVM 18 we need to check the output for errors
      grep -qzv ": error: " clang-tidy-diff.log
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      <<: *cpp-rules-changes

lint:clang-scan-build:
  extends:
    - .lint
    - .debian-clang
  needs:
    - job: build:debian-clang
      artifacts: false
  variables:
    CCC_CC: clang
    CCC_CXX: clang++
  script:
    - meson setup build -Dimpl_cxx=enabled -Dbuildtype=debug
    - ninja -C build scan-build
    - if [ ! -z "$(ls -A build/meson-logs/scanbuild)" ]; then false; fi
  artifacts:
    paths:
      - build/meson-logs/scanbuild
    when: on_failure
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "schedule"

lint:coverity-scan:
  extends:
    - .lint
    - .ubuntu-24.04
  needs:
    - job: build:ubuntu-24.04
      artifacts: false
  script:
    - curl -s https://scan.coverity.com/download/linux64 -o /tmp/cov-analysis-linux64.tgz
        --form project=$COVERITY_SCAN_PROJECT_NAME --form token=$COVERITY_SCAN_TOKEN
    - tar -xzf /tmp/cov-analysis-linux64.tgz
    - rm -r /tmp/cov-analysis-linux64.tgz
    - meson setup build -Dimpl_cxx=enabled -Dbuildtype=debug
    - cov-analysis-linux64-*/bin/cov-build --dir cov-int ninja -C build
    - tar -czf cov-int.tgz cov-int
    - curl -s https://scan.coverity.com/builds?project=$COVERITY_SCAN_PROJECT_NAME
        --form token=$COVERITY_SCAN_TOKEN --form email=$GITLAB_USER_EMAIL
        --form file=@cov-int.tgz --form version="$CI_COMMIT_REF_NAME"
        --form description="$CI_COMMIT_REF_NAME / $CI_COMMIT_SHA / $CI_PIPELINE_ID"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "schedule"

# format stage

.format:
  stage: format
  needs: []

format:black:
  extends:
    - .format
    - .python-venv
    - .python-3.11
  script:
    - pip install --no-build-isolation -e .[dev]
    - black python/

format:flake8:
  extends:
    - .format
    - .python-venv
    - .python-3.11
  script:
    - pip install --no-build-isolation -e .[dev]
    - flake8 python/

format:clang-format:
  extends:
    - .format
    - .debian-clang
  script:
    - meson setup build -Dimpl_cxx=enabled
    - ninja -C build clang-format-check

format:reuse:
  extends: .format
  image: registry.cern.ch/docker.io/fsfe/reuse:latest
  script:
    - reuse lint

format:codespell:
  extends:
    - .format
    - .debian-gcc
  script:
    - codespell

# docs stage

.docs:
  stage: docs
  needs: []

docs:doxygen:
  extends:
    - .docs
    - .fedora-sphinx
  script:
    - make -C docs doxygen

# deploy stage

deploy:docs:
  stage: deploy
  needs:
    - job: docs:doxygen
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  trigger:
    project: constellation/constellation.pages.desy.de
